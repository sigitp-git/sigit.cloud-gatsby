/**
 * Implement Gatsby's Node APIs in this file.
 *
 * See: https://www.gatsbyjs.org/docs/node-apis/
 */

// You can delete this file if you're not using it

const path = require(`path`)
const { createFilePath } = require(`gatsby-source-filesystem`)


// Creates path to the nodes (md files from MarkdownRemark)
// onCreateNode runs during server start
// bunch of nodes created from the filesystem during server starts
// we are only interested on node.internal.type MarkdownRemark nodes (md files)
// other node.internal.type is SitePage, which is our .js files inside src
exports.onCreateNode = ({ node, getNode, actions }) => {
    const { createNodeField } = actions
    if (node.internal.type === `MarkdownRemark`) {
        const slug = createFilePath({ node, getNode })
        // console.log('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@', slug)
        // createNodeField creates "fields" in graphql named 'slug' with value of slug for that node:node
        createNodeField({ node:node, name: `slug`, value: slug })
    }
}

// Dynamically reate pages based on graphql query on slugs from each node, put component of that page from blog-post.js template
exports.createPages = ({ graphql, actions }) => {
    const { createPage } = actions
    const blogPostTemplate = path.resolve('./src/templates/blog-post.js')

    // this graphql is function string to pass graphql query, this is a node version of graphql
    // this query returns a promise of slugs. use then instead of async await
    return graphql(`
    query loadSlugQuery($limit: Int!) {
        allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }, limit: $limit) {
            edges {
                node {
                    fields {
                        slug
                    }
                }
            }
        }
    }
    `,{ limit: 1000 }).then(result => {
        result.data.allMarkdownRemark.edges.forEach(({ node }) => {
            createPage({
                path: node.fields.slug,
                component: blogPostTemplate,
                context: {
                    slug: node.fields.slug
                },
            })
        })
    })
}
