import React from "react"
import { Link, graphql } from "gatsby"

import Layout from "../components/layout"
import SEO from "../components/seo"

// const { currentPage, numPages } = props.pageContext
// const isFirst = currentPage === 1
// const isLast = currentPage === numPages
// const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString()
// const nextPage = (currentPage + 1).toString()

const IndexPage = ({data}) => (
  <Layout>
    <SEO title="Home" />
    {/* {console.log(data)} */}

    {
      data.allMarkdownRemark.edges.map(({node}) => (
        <div key={node.id}>
          <Link to={ node.fields.slug }><h1>{ node.frontmatter.title }</h1></Link>
          <p>{ node.frontmatter.date }</p>
          <p>{ node.excerpt }</p>
          <Link to={ node.fields.slug }><h5>Read more...</h5></Link><br/>
        </div>
      ))
    }
    <div><h4>Total: { data.allMarkdownRemark.totalCount } posts</h4></div>

    {/* {!isFirst && (
      <Link to={prevPage} rel="prev" style={{ color: 'darkslateblue' }}>
        ← Previous Page
      </Link>
    )}
    {Array.from({ length: numPages }, (_, i) => (
      <li
        key={`pagination-number${i + 1}`}
        style={{
          margin: 0,
        }}
      >
        <Link
          to={`/${i === 0 ? '' : i + 1}`}
          style={{
            padding: '1rem',
            textDecoration: 'none',
            color: i + 1 === currentPage ? '#ffffff' : 'darkslateblue',
            background: i + 1 === currentPage ? 'darkslateblue' : '',
          }}
        >
          {i + 1}
        </Link>
      </li>
    ))}
    {!isLast && (
      <Link to={nextPage} rel="next" style={{ color: 'darkslateblue' }}>
        Next Page →
      </Link>
    )} */}

  </Layout>
)

export default IndexPage

// export const pageQuery = graphql`
//   query blogPageQuery($skip: Int!, $limit: Int!) {
//     site {
//       siteMetadata {
//         title
//       }
//     }
//     allMarkdownRemark(
//       sort: { fields: [frontmatter___date], order: DESC }
//       limit: $limit
//       skip: $skip
//     ) {
//       edges {
//         node {
//           excerpt
//           fields {
//             slug
//           }
//           frontmatter {
//             date(formatString: "DD MMMM, YYYY")
//             title
//           }
//         }
//       }
//     }
//   }
// `

export const pageQuery = graphql`
  query indexPageQuery {
  allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }, limit: 1000, skip: 0) {
    totalCount
    edges {
      node {
        id
        frontmatter {
          date(formatString: "DD MMMM, YYYY")
          title
        }
        excerpt
        fields {
          slug
        }
      }
    }
  }
}
`
